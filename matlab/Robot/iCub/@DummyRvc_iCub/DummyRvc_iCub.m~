% this class is an iterface between the icub robot class and the subchain class

classdef DummyRvc_iCub < handle

    properties
        icub             % pointer to the icub structure (to reproduce the same structure of )
        link             % dummy parameter to be compliant with the subchain class
        name             % dummy parameter to be compliant with the subchain class
        model3d          % dummy parameter to be compliant with the subchain class
        tag              % string that represent the kinematic link that i want to control
    end
    
    methods
        function obj = DummyRvc_iCub(icub,tag)
            obj.icub = icub;
            obj.link = 'iCub';
            obj.name = 'iCub';
            obj.model3d = 'iCub';
            obj.tag = tag;
            
        end   
        
        function fkine(obj,q)
            obj.icub.fkine(obj,q,obj.tag);
        end
        
        function jacob0(obj,q,varargin)
            opt.rpy = false;
            opt.eul = false;
            opt.trans = false;
            opt.rot = false;
    
            opt = tb_optparse(opt, varargin);
            
            
            if opt.rpy
        rpy = tr2rpy( fkine(robot, q) );
        B = rpy2jac(rpy);
        if(~isa(B, 'sym'))
           if rcond(B) < eps
               disp('Representational singularity');
                J0 = blkdiag( eye(3,3), inv(B + 0.01*eye(size(B,1))) ) * J0;
           else
               J0 = blkdiag( eye(3,3), inv(B) ) * J0;
           end
            
        else
            J0 = blkdiag( eye(3,3), inv(B) ) * J0;
        end
        elseif opt.eul
            eul = tr2eul( fkine(robot, q) );
            B = eul2jac(eul);
            if rcond(B) < eps
                error('Representational singularity');
            end
            J0 = blkdiag( eye(3,3), inv(B) ) * J0;
        end

        if opt.trans
            J0 = J0(1:3,:);
        elseif opt.rot
            J0 = J0(4:6,:);
        end
            
            obj.icub.jacob0(obj,q,obj.tag);
        end
        
        function jacob_dot(obj,q,dq)
            obj.icub.jacob_dot(q,dq,obj.tag);
        end 
        
    end

    


end